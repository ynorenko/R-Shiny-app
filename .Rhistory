data12 = data %>%
select(Provider.State, Total.Discharges, DRG.Definition, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
filter(DRG.Definition == '470 - MAJOR JOINT REPLACEMENT OR REATTACHMENT OF LOWER EXTREMITY W/O MCC')
ggplot(data12, aes(x = Average.Total.Payments)) + geom_histogram(binwidth = 700)
ggplot(aes(x = Provider.State, y = Average.Medicare.Payments)) + geom_point()
ggplot(aes(x = Provider.State, y = Average.Medicare.Payments)) + geom_point()
runApp()
runApp()
runApp()
runApp()
#coor plot
ggcorrplot(cor(data_by_code), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
library(ggcorrplot)
#coor plot
ggcorrplot(cor(data_by_code), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
data_by_code = data %>%
select(DRG.Definition, Total.Discharges, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
group_by(DRG.Definition) %>%
summarise(total_discharges=sum(Total.Discharges), average_covered_charges = mean(Average.Covered.Charges),average_total_payment = mean(Average.Total.Payments), average_medicare_payments = mean(Average.Medicare.Payments)) %>%
remove_rownames() %>%
column_to_rownames(var = 'DRG.Definition')
data_by_code = data %>%
select(DRG.Definition, Total.Discharges, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
group_by(DRG.Definition) %>%
summarise(total_discharges=sum(Total.Discharges), average_covered_charges = round(mean(Average.Covered.Charges),0), average_total_payment = round(mean(Average.Total.Payments),0), average_medicare_payments = round(mean(Average.Medicare.Payments),0)) %>%
select(DRG.Definition, total_discharges, average_covered_charges, average_total_payment, average_medicare_payments) %>%
setNames(c('DRG Definition', 'Total discharges', 'Average covered charges', 'Average total payments', 'Average Medicare payments'))
ordered_data_by_code = data_by_code %>%
mutate(Code = sapply(strsplit('DRG definition', "-"), "[", 1), Definition = sapply(strsplit('DRG definition', "-"), "[", 2)) %>%
arrange(!!sym('Total discharges')) %>%
head(10)
cor(data_by_code)
#coor plot
ggcorrplot(cor(data_by_code), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
data_by_code_state = data %>%
select(DRG.Definition, Provider.State, Total.Discharges, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
group_by(DRG.Definition, Provider.State) %>%
summarise('Total discharges' = sum(Total.Discharges), average_covered_charges = mean(Average.Covered.Charges),average_total_payment = mean(Average.Total.Payments), average_medicare_payments = mean(Average.Medicare.Payments))
procedure_codes = unique(data_by_code_state$DRG.Definition)
colnames(data_by_state)[colnames(data_by_state)=="Provider.State"] = "provider_state"
data_by_state = data_by_code_state %>%
group_by(Provider.State) %>%
summarise(total_discharges = sum(total_discharges), average_covered_charges = mean(average_covered_charges),average_total_payment = mean(average_total_payment), average_medicare_payments = mean(average_medicare_payments))
colnames(select(data_by_state, total_discharges, average_total_payment, average_covered_charges,average_medicare_payments))
choice = colnames(select(data_by_state, total_discharges, average_total_payment, average_covered_charges,average_medicare_payments))
data_by_code = data %>%
select(DRG.Definition, Total.Discharges, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
group_by(DRG.Definition) %>%
summarise(total_discharges=sum(Total.Discharges), average_covered_charges = mean(Average.Covered.Charges),average_total_payment = mean(Average.Total.Payments), average_medicare_payments = mean(Average.Medicare.Payments)) %>%
remove_rownames() %>%
column_to_rownames(var = 'DRG.Definition')
data_by_code = data %>%
select(DRG.Definition, Total.Discharges, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
group_by(DRG.Definition) %>%
summarise(total_discharges=sum(Total.Discharges), average_covered_charges = round(mean(Average.Covered.Charges),0), average_total_payment = round(mean(Average.Total.Payments),0), average_medicare_payments = round(mean(Average.Medicare.Payments),0)) %>%
select(DRG.Definition, total_discharges, average_covered_charges, average_total_payment, average_medicare_payments) %>%
setNames(c('DRG Definition', 'Total discharges', 'Average covered charges', 'Average total payments', 'Average Medicare payments'))
ordered_data_by_code = data_by_code %>%
mutate(Code = sapply(strsplit('DRG definition', "-"), "[", 1), Definition = sapply(strsplit('DRG definition', "-"), "[", 2)) %>%
arrange(!!sym('Total discharges')) %>%
head(10)
coor plot
ggcorrplot(cor(data_by_code), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
View(data_by_code)
View(data_by_code)
cor(data_by_code)
select(data_by_code, 'Total discharges', 'Average covered charges', 'Average total payments', 'Average Medicare payments'))
cor(data_by_code)
select(data_by_code, 'Total discharges', 'Average covered charges', 'Average total payments', 'Average Medicare payments')
cor(data_by_code)
cor_data = select(data_by_code, 'Total discharges', 'Average covered charges', 'Average total payments', 'Average Medicare payments')
ggcorrplot(cor(cor_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
ggplotly(ggcorrplot(cor(cor_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw))
ggcorrplot(cor(cor_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
cor(data_by_code)
cor(cor_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data_by_code_2)
View(data_by_code_2)
c_data = data %>%
select(Total.Discharges, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments)
#coor plot
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
cor_data = select(data_by_code, 'Total discharges', 'Average covered charges', 'Average total payments', 'Average Medicare payments')
c_data = data %>%
select(Total.Discharges, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
setNames(c('Total discharges', 'Average total payments','Average covered charges', 'Average Medicare payments'))
#coor plot
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 5,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
#coor plot
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw,
theme_set(base_size = 18))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw,
theme_set(base_size = 18))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw,
theme_set(base_size = 20))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(axis.text = element_text(size = 15))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(axis.text = element_text(size = 20))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(axis.text = element_text(size = 100))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(axis.text = element_text(size = 15))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(axis.text = element_text(size = 100))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(axis.text=element_text(size=10),axis.title=element_text(size=10))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
axis.text=element_text(size=10)
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(axis.text=element_text(size=10),axis.title=element_text(size=10))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
axis.text=element_text(size=10),
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(axis.text=element_text(size=10),axis.title=element_text(size=10))
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
axis.text=element_text(size=10),
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
axis_size = 10,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
runApp()
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 12
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 12,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 20,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 15,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw)
runApp()
ggcorrplot(cor(c_data), hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 15,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlations",
ggtheme=theme_bw) + theme(plot.title = element_text(size=22))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("imageOutput")
help("imageOutput")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
data %>%
select(Provider.State, DRG.Definition, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
filter(DRG.Definition == '470 - MAJOR JOINT REPLACEMENT OR REATTACHMENT OF LOWER EXTREMITY W/O MCC') %>%
mutate(ratio = Average.Covered.Charges/Average.Medicare.Payments)
data_ratio = data %>%
select(Provider.State, DRG.Definition, Average.Total.Payments, Average.Covered.Charges, Average.Medicare.Payments) %>%
filter(DRG.Definition == '470 - MAJOR JOINT REPLACEMENT OR REATTACHMENT OF LOWER EXTREMITY W/O MCC') %>%
mutate(ratio = Average.Covered.Charges/Average.Medicare.Payments)
ggplot(data_ratio, aes(x = Provider.State, y = ratio)) + geom_violin(aes(fill = Provider.State), alpha=0.6) +
theme(legend.position="none")
ggplot(data_ratio, aes(x = Provider.State, y = ratio)) + geom_boxplot(aes(fill = Provider.State), alpha=0.6) +
theme(legend.position="none")
runApp()
runApp()
runApp()
runApp()
runApp()
View(data_ratio)
runApp()
runApp()
runApp()
runApp()
runApp()
View(data_ratio)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
